---
layout: post
title: Sraping E-Commerce Site Using Selenium
date: 2021-11-07 10:00:00 +0700
---
In this project, I created a web scraper using dockerized selenium.

Here is a screenshot of the terminal log when the scraper is running.

![selenium log](/assets/img/selenium.png)

This is a screenshot of the data that is generated by the scraper.

![dataset](/assets/img/selenium-tokped.png)

Here is a snippet of one of the functions in the codes.

{% highlight ruby %}
def generate_item_instance(args: dict, driver):
    logger.debug('fetching item...')
    # args = { 'url': url_from item, 'page': page_number, 'index': index item di page, 'paid_ads': boolean, 'ad_index': index }
    url = args['url']
    page = args['page']
    index = args['index']
    paid_ads = args['paid_ads']
    ad_index = args['ad_index']
    # request(url, driver)
    navigate_page(url, driver)

    s = Detector(url).selector
    i = Item()
    
    #get item name
    name = get_text_from_tag(s._item_name_selector, driver)  
    name = name.strip() if name else None
    # get item price
    price = get_text_from_tag(s._item_price_selector, driver)
    price = s.get_price(price.strip()) if price and price.strip() else None     
    # get item sold
    sold = get_text_from_tag(s._item_sold_selector, driver, s._item_name_selector)
    sold = s.get_sold(sold.strip()) if sold and sold.strip() else None
    # get item rating
    rating = get_text_from_tag(s._item_rating_selector, driver, s._item_name_selector)
    rating = s.get_rating(rating.strip()) if rating and rating.strip() else None
    # get item rating counts
    rating_counts = get_text_from_tag(s._item_rating_counts_selector, driver, s._item_name_selector)
    rating_counts = s.get_rating_counts(rating_counts.strip()) if rating_counts and rating_counts.strip() else None
    # get item brand
    brand = get_tags(s._item_info_selector, driver)
    brand = s.get_brand(brand)
    
    # get app name
    app = s.app_name
    
    i.url_from = url
    i.name = name
    i.price = price
    i.sold = sold
    i.shop = generate_shop_instance(url, driver)
    i.keyword = KEYWORD    
    i.app = app
    i.page = page
    i.created_at = CREATED_AT
    
    i.brand = brand
    i.rating = rating
    i.rating_counts = rating_counts
    i.paid_ads = paid_ads
    i.index = index
    i.ad_index = ad_index
    i.master_category_id = CATEGORY[app]['master_category_id']
    i.master_category_name = CATEGORY[app]['master_category_name']
    i.category_id = CATEGORY[app]['category_id']
    i.category_name = CATEGORY[app]['category_name']
    i.category_rank = CATEGORY[app]['category_rank']
    
    return i
{% endhighlight %}

The function above create an item instance, and this instance will be saved in the database.